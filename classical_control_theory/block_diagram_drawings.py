# AUTOGENERATED! DO NOT EDIT! File to edit: 98_Block_diagram_drawings.ipynb (unless otherwise specified).

__all__ = ['font', 'Box', 'Arrow', 'BlockManager']

# Cell
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.patches import BoxStyle
from matplotlib import rc
import numpy as np

import os,binascii

# Cell
font = {'family' : 'DejaVu Sans',
        'weight' : 'normal',
        'size'   : 27}

mpl.rcParams['lines.linewidth'] = 5
mpl.rcParams['lines.linestyle'] = '-'

rc('font', **font)

# Cell
plt.xkcd()  # Yes...

# Cell
class Box():
    # see also https://stackoverflow.com/questions/17086847/box-around-text-in-matplotlib
    def __init__(self, x, y, width, height, text=''):
        self._x = x
        self._y = y
        self._width = width
        self._height= height
        self._text = text
        self._box_patch = None
        self._edgecolor = 'black'
        self._facecolor = 'black'
        self._fontsize  = 22
        self._fontcolor = 'black'

    def draw(self, ax=None):
        if ax is None:
            current_ax = plt.gca()
        else:
            current_ax = ax

        if len(self._text) > 0:
            self._box_patch = BoxStyle("Round", pad=1)
            props = {'boxstyle': self._box_patch,
                     'facecolor': 'white',
                     'linestyle': 'solid',
                     'linewidth': 2,
                     'edgecolor': self._edgecolor,
                     }

            textbox = current_ax.text(self._x, self._y, self._text, bbox=props,
                                      color = self._fontcolor, fontsize=self._fontsize)
        else:
            self._box_patch = current_ax.add_patch(Rectangle((self._x, self._y),
                                                          self._width, self._height,
                                                         edgecolor = self._edgecolor,
                                                         facecolor = self._facecolor,
                                                         fill = False,
                                                         lw = 2)
                                                        )
            #             self._text_patch = current_ax.text(self._x + self._width/2-len(self._text)/(3*self._width),
            #                             self._y + self._height/2-len(self._text)/(5*self._height),
            #                             self._text,
            #                             fontsize = self._fontsize,
            #                             color = self._fontcolor)

    @property
    def fontsize(self):
        return self._fontsize

    @fontsize.setter
    def fontsize(self, fs):
        self._fontsize = fs


    @property
    def fontcolor(self):
        return self._fontcolor

    @fontcolor.setter
    def fontcolor(self, fc):
        self._fontcolor = fc


# Cell
class Arrow():
    def __init__(self, x0, y0, xf, yf):
        self._x0 = x0
        self._y0 = y0
        self._xf = xf
        self._yf = yf
        self._length = np.linalg.norm(np.array([x0, y0])-np.array([xf, yf]))
        self._edgecolor = 'black'
        self._facecolor = 'black'
        self._head_width = self._length*0.1
        self._head_length = self._length*0.1
        self._arrow_patch = None

    def draw(self):
        self._arrow_patch = plt.arrow(self._x0, self._y0, self._xf-self._x0, self._yf-self._y0,
                                     length_includes_head = True,
                                     head_width = self._head_width,
                                     head_length = self._head_length,
                                     linewidth=3,
                                     color='black'
                                     )



# Cell
class BlockManager():
    def __init__(self):
        pass

    def clean_plot(self):
        plt.axis('off')

    def save_plot(self, filename=None):
        if filename is None:
            filename = binascii.b2a_hex(os.urandom(7)) + '.png'
        plt.savefig(filename, bbox_inches='tight')